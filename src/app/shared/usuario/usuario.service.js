"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var operators_1 = require("rxjs/operators");
var http_1 = require("@angular/common/http");
//NAVEGACION
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
//URL API
var url_api_1 = require("../url_api");
//LOCALSTORAGE
var localStorage = require("nativescript-localstorage");
var UsuarioService = /** @class */ (function () {
    function UsuarioService(http, router, routerExtensions) {
        this.http = http;
        this.router = router;
        this.routerExtensions = routerExtensions;
        this.usuario = localStorage.getItem('usuario');
        this.verificarSesion();
    }
    //UNA VEZ QUE SE OBTIENE EL USUARIO DE LOCAL STORAGE, VERIFICA QUE ESTE AUTENTICADO
    UsuarioService.prototype.verificarSesion = function () {
        if (this.usuario != undefined) {
            this.authStatus = true;
        }
        else {
            this.authStatus = false;
        }
        console.log("Usuario autenticado", this.authStatus);
    };
    //LOGIN
    UsuarioService.prototype.login = function (usuario) {
        var headers = this.createRequestHeader();
        var url = url_api_1.URL_API + '/login';
        return this.http.post(url, usuario, { headers: headers }).pipe(operators_1.map(function (res) {
            //SI NO EXISTE NINGUN ERROR, ALMACENAMOS EL USUARIO EN STORAGE
            if (!res.error) {
                localStorage.setItem('usuario', JSON.stringify(res.usuario));
            }
            return res;
        }));
    };
    UsuarioService.prototype.cerrarSesion = function () {
        var _this = this;
        localStorage.removeItem('usuario');
        this.usuario = null;
        this.authStatus = false;
        setTimeout(function () {
            _this.routerExtensions.navigate(["/home"], {
                clearHistory: true,
                transition: {
                    name: "fade"
                }
            });
        }, 800);
    };
    UsuarioService.prototype.register = function (usuario) {
        var headers = this.createRequestHeader();
        var url = url_api_1.URL_API + '/usuario/registrar/';
        return this.http.post(url, usuario, { headers: headers }).pipe(operators_1.map(function (res) {
            return res;
        }));
    };
    UsuarioService.prototype.createRequestHeader = function () {
        // set headers here e.g.
        var headers = new http_1.HttpHeaders({
            "Content-Type": "application/json",
        });
        return headers;
    };
    UsuarioService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient,
            router_1.Router,
            router_2.RouterExtensions])
    ], UsuarioService);
    return UsuarioService;
}());
exports.UsuarioService = UsuarioService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXN1YXJpby5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidXN1YXJpby5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBRTNDLDRDQUFzRDtBQUN0RCw2Q0FBK0Q7QUFDL0QsWUFBWTtBQUNaLDBDQUF3RDtBQUN4RCxzREFBK0Q7QUFHL0QsU0FBUztBQUNULHNDQUFxQztBQUNyQyxjQUFjO0FBQ2Qsd0RBQTBEO0FBRzFEO0lBSUksd0JBQ1ksSUFBZ0IsRUFDaEIsTUFBYyxFQUNwQixnQkFBa0M7UUFGNUIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ3BCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFFcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBR0QsbUZBQW1GO0lBQ25GLHdDQUFlLEdBQWY7UUFDSSxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxDQUFBLENBQUM7WUFDMUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDM0IsQ0FBQztRQUFBLElBQUksQ0FBQSxDQUFDO1lBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDNUIsQ0FBQztRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxPQUFPO0lBQ1AsOEJBQUssR0FBTCxVQUFNLE9BQWU7UUFDakIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDekMsSUFBSSxHQUFHLEdBQUcsaUJBQU8sR0FBRyxRQUFRLENBQUM7UUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQzVELGVBQUcsQ0FBQyxVQUFDLEdBQVE7WUFDVCw4REFBOEQ7WUFDOUQsRUFBRSxDQUFBLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQztnQkFDYixZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQy9ELENBQUM7WUFFSCxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNiLENBQUM7SUFFRCxxQ0FBWSxHQUFaO1FBQUEsaUJBWUM7UUFYRyxZQUFZLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLFVBQVUsQ0FBQztZQUNQLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDdEMsWUFBWSxFQUFFLElBQUk7Z0JBQ2xCLFVBQVUsRUFBRTtvQkFDUixJQUFJLEVBQUUsTUFBTTtpQkFDZjthQUNKLENBQUMsQ0FBQztRQUNQLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNaLENBQUM7SUFFRCxpQ0FBUSxHQUFSLFVBQVMsT0FBZ0I7UUFDckIsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDekMsSUFBSSxHQUFHLEdBQUcsaUJBQU8sR0FBRyxxQkFBcUIsQ0FBQztRQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDNUQsZUFBRyxDQUFDLFVBQUMsR0FBUTtZQUNYLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDYixDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2IsQ0FBQztJQUdPLDRDQUFtQixHQUEzQjtRQUNJLHdCQUF3QjtRQUN4QixJQUFJLE9BQU8sR0FBRyxJQUFJLGtCQUFXLENBQUM7WUFDMUIsY0FBYyxFQUFFLGtCQUFrQjtTQUNwQyxDQUFDLENBQUM7UUFFSixNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ25CLENBQUM7SUF0RVEsY0FBYztRQUQxQixpQkFBVSxFQUFFO3lDQU1TLGlCQUFVO1lBQ1IsZUFBTTtZQUNGLHlCQUFnQjtPQVAvQixjQUFjLENBd0UxQjtJQUFELHFCQUFDO0NBQUEsQUF4RUQsSUF3RUM7QUF4RVksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgdGFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XHJcbi8vTkFWRUdBQ0lPTlxyXG5pbXBvcnQgeyBOYXZpZ2F0aW9uRW5kLCBSb3V0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XHJcbmltcG9ydCB7IFJvdXRlckV4dGVuc2lvbnMgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvcm91dGVyXCI7XHJcbi8vTU9ERUxPXHJcbmltcG9ydCB7IFVzdWFyaW8gfSBmcm9tIFwiLi91c3VhcmlvLm1vZGVsXCI7XHJcbi8vVVJMIEFQSVxyXG5pbXBvcnQgeyBVUkxfQVBJIH0gZnJvbSBcIi4uL3VybF9hcGlcIjtcclxuLy9MT0NBTFNUT1JBR0VcclxuaW1wb3J0ICogYXMgbG9jYWxTdG9yYWdlIGZyb20gJ25hdGl2ZXNjcmlwdC1sb2NhbHN0b3JhZ2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVXN1YXJpb1NlcnZpY2Uge1xyXG4gICAgcHVibGljIHVzdWFyaW86IFVzdWFyaW87XHJcbiAgICBwdWJsaWMgYXV0aFN0YXR1czogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXHJcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcclxuXHRcdHByaXZhdGUgcm91dGVyRXh0ZW5zaW9uczogUm91dGVyRXh0ZW5zaW9ucyxcclxuICAgICkgeyBcclxuICAgICAgICB0aGlzLnVzdWFyaW8gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXN1YXJpbycpO1xyXG4gICAgICAgIHRoaXMudmVyaWZpY2FyU2VzaW9uKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vVU5BIFZFWiBRVUUgU0UgT0JUSUVORSBFTCBVU1VBUklPIERFIExPQ0FMIFNUT1JBR0UsIFZFUklGSUNBIFFVRSBFU1RFIEFVVEVOVElDQURPXHJcbiAgICB2ZXJpZmljYXJTZXNpb24oKXtcclxuICAgICAgICBpZih0aGlzLnVzdWFyaW8gIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgdGhpcy5hdXRoU3RhdHVzID0gdHJ1ZTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5hdXRoU3RhdHVzID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiVXN1YXJpbyBhdXRlbnRpY2Fkb1wiLCB0aGlzLmF1dGhTdGF0dXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vTE9HSU5cclxuICAgIGxvZ2luKHVzdWFyaW86VXN1YXJpbykge1xyXG4gICAgICAgIGxldCBoZWFkZXJzID0gdGhpcy5jcmVhdGVSZXF1ZXN0SGVhZGVyKCk7XHJcbiAgICAgICAgbGV0IHVybCA9IFVSTF9BUEkgKyAnL2xvZ2luJztcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgdXN1YXJpbywgeyBoZWFkZXJzOiBoZWFkZXJzIH0pLnBpcGUoXHJcbiAgICAgICAgICAgICAgbWFwKChyZXM6IGFueSkgPT57XHJcbiAgICAgICAgICAgICAgICAgIC8vU0kgTk8gRVhJU1RFIE5JTkdVTiBFUlJPUiwgQUxNQUNFTkFNT1MgRUwgVVNVQVJJTyBFTiBTVE9SQUdFXHJcbiAgICAgICAgICAgICAgICAgIGlmKCFyZXMuZXJyb3Ipe1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c3VhcmlvJywgSlNPTi5zdHJpbmdpZnkocmVzLnVzdWFyaW8pKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICAgIH0pKVxyXG4gICAgfVxyXG5cclxuICAgIGNlcnJhclNlc2lvbigpe1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1c3VhcmlvJyk7XHJcbiAgICAgICAgdGhpcy51c3VhcmlvID0gbnVsbDtcclxuICAgICAgICB0aGlzLmF1dGhTdGF0dXMgPSBmYWxzZTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yb3V0ZXJFeHRlbnNpb25zLm5hdmlnYXRlKFtcIi9ob21lXCJdLCB7XHJcbiAgICAgICAgICAgICAgICBjbGVhckhpc3Rvcnk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJmYWRlXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgODAwKTtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3Rlcih1c3VhcmlvOiBVc3VhcmlvKSB7XHJcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB0aGlzLmNyZWF0ZVJlcXVlc3RIZWFkZXIoKTtcclxuICAgICAgICBsZXQgdXJsID0gVVJMX0FQSSArICcvdXN1YXJpby9yZWdpc3RyYXIvJztcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgdXN1YXJpbywgeyBoZWFkZXJzOiBoZWFkZXJzIH0pLnBpcGUoXHJcbiAgICAgICAgICAgICAgbWFwKChyZXM6IGFueSkgPT57XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgICAgICAgIH0pKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgIHByaXZhdGUgY3JlYXRlUmVxdWVzdEhlYWRlcigpIHtcclxuICAgICAgICAvLyBzZXQgaGVhZGVycyBoZXJlIGUuZy5cclxuICAgICAgICBsZXQgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiBoZWFkZXJzO1xyXG4gICAgfVxyXG5cclxufSJdfQ==