"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var operators_1 = require("rxjs/operators");
var http_1 = require("@angular/common/http");
//NAVEGACION
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
//URL API
var url_api_1 = require("../url_api");
//LOCALSTORAGE
var localStorage = require("nativescript-localstorage");
//AQUI SE ALMACENA EL USUARIO
var auth_1 = require("../auth");
var UsuarioService = /** @class */ (function () {
    function UsuarioService(http, router, routerExtensions, authS) {
        this.http = http;
        this.router = router;
        this.routerExtensions = routerExtensions;
        this.authS = authS;
        var parseUser = localStorage.getItem('usuario');
        this.authS.usuarioAuth = JSON.parse(parseUser);
        this.verificarSesion();
    }
    //UNA VEZ QUE SE OBTIENE EL USUARIO DE LOCAL STORAGE, VERIFICA QUE ESTE AUTENTICADO
    //Y QUE EL TOKEN SIGA SIENDO VALIDO
    UsuarioService.prototype.verificarSesion = function () {
        var _this = this;
        if (this.authS.usuarioAuth != undefined) {
            this.authStatus = true;
            var headers = this.createRequestHeader();
            var url = url_api_1.URL_API + '/usuario/obtenerUsuarioPorId';
            var usuario = {
                id_usuario: this.authS.usuarioAuth.id_usuario
            };
            this.http.post(url, usuario, { headers: headers }).pipe(operators_1.map(function (res) {
                // console.log("token", res.usuario.token);
                // console.log("actual token", this.authS.usuarioAuth.token);
                if (res.usuario.token === _this.authS.usuarioAuth.token) {
                    _this.authStatus = true;
                }
                else {
                    _this.cerrarSesion();
                }
            })).subscribe();
        }
        else {
            this.authStatus = false;
        }
    };
    //LOGIN
    UsuarioService.prototype.login = function (usuario) {
        var _this = this;
        var headers = this.createRequestHeader();
        var url = url_api_1.URL_API + '/login';
        return this.http.post(url, usuario, { headers: headers }).pipe(operators_1.map(function (res) {
            //SI NO EXISTE NINGUN ERROR, ALMACENAMOS EL USUARIO EN STORAGE
            if (!res.error) {
                _this.authS.usuarioAuth = res.usuario;
                _this.authS.usuarioAuth = res.usuario;
                localStorage.setItem('usuario', JSON.stringify(res.usuario));
                if (_this.authS.usuarioAuth.tipo === '0') {
                    _this.firstPage = "usuario";
                }
                if (_this.authS.usuarioAuth.tipo === '1') {
                    _this.firstPage = "profesor";
                }
                _this.routerExtensions.navigate(['/' + _this.firstPage], {
                    clearHistory: true,
                    transition: {
                        name: "fade"
                    }
                });
            }
            return res;
        }));
    };
    UsuarioService.prototype.cerrarSesion = function () {
        localStorage.removeItem('usuario');
        this.authS.usuarioAuth = null;
        this.authStatus = false;
        this.routerExtensions.navigate(["/home"], {
            clearHistory: true,
            transition: {
                name: "fade"
            }
        });
    };
    UsuarioService.prototype.register = function (usuario) {
        var headers = this.createRequestHeader();
        var url = url_api_1.URL_API + '/usuario/registrar/';
        return this.http.post(url, usuario, { headers: headers }).pipe(operators_1.map(function (res) {
            return res;
        }));
    };
    UsuarioService.prototype.createRequestHeader = function () {
        // set headers here e.g.
        var headers = new http_1.HttpHeaders({
            "Content-Type": "application/json",
        });
        return headers;
    };
    UsuarioService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient,
            router_1.Router,
            router_2.RouterExtensions,
            auth_1.authService])
    ], UsuarioService);
    return UsuarioService;
}());
exports.UsuarioService = UsuarioService;
//# sourceMappingURL=data:application/json;base64,